{"version":3,"file":"static/js/246.ff8ffb35.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx","redux/contacts/contactsSelectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto;\n  gap: 12px;\n  width: 420px;\n  padding: 8px;\n  border: 1px solid currentColor;\n  border-radius: 10px;\n\n  @media (max-width: 1023.98px) {\n    gap: 10px;\n    width: 320px;\n    padding: 6px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 8px;\n    width: 220px;\n    padding: 4px;\n\n    border-radius: 6px;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 10px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n    margin-bottom: 8px;\n\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n    margin-bottom: 6px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  width: 340px;\n  height: 24px;\n  padding-left: 12px;\n\n  font-size: 18px;\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n\n  &:hover {\n    background-color: var(--light-focus-color);    \n    color: #fff;\n  }\n\n  &:focus {    \n    background-color: var(--light-focus-color);\n    border-color: var(--light-focus-color);\n    color: #000;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 270px;\n    height: 20px;\n    padding-left: 10px;\n\n    font-size: 14px;\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 200px;\n    height: 16px;\n    padding-left: 8px;\n\n    font-size: 10px;\n    border-radius: 6px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const Button = styled.button`  \n  height: 28px;\n\n  font-size: 18px;\n  text-transform: capitalize;  \n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n\n  &:hover,\n  &:focus {\n    background-color: #ff6b0a;\n    border-color: #ff6b0a;\n    color: #fff;\n  }\n\n  @media (max-width: 1023.98px) {\n    height: 24px;\n\n    font-size: 14px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    height: 20px;\n\n    font-size: 10px;\n\n    border-radius: 5px;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  FormContainer,\n  Label,\n  Input,\n  Button,\n  Error,\n} from './ContactForm.styled'; // імпорт стилів тегів form (FormContainer), label (Label), input (Input), button (Button)\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/; // регулярний вираз для імені\nconst numberRegex = /^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$/; // регулярний вираз для номера телефону\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(nameRegex, 'Name is not valid!')\n    .trim()\n    .required('Required!'),\n  number: Yup.string()\n    .min(7, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(numberRegex, 'Phone number is not valid!')\n    .trim()\n    .required('Required!'),\n}); // валідація полів форми\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n}; // ініціалізація полів форми\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux за допомогою функції селектора selectContacts\n  \n  const dispatch = useDispatch(); //виклик хука useDispatch повертає посилання на dispatch функцію зі сховища Redux, для відправки action за потреби\n  const addNewContact = e => {\n    const { name, number } = e;\n    if (\n      contacts.find(\n        item =>\n          item.name.toLowerCase().replaceAll(' ', '') ===\n          name.toLowerCase().replaceAll(' ', '')\n      ) // при порівнянні приводимо до нижнього регістру та видаляємо пробіли, для унеможливлення реєстрації однакових імен з додатковими пробілами\n    ) {\n      return Notiflix.Notify.warning(`Name ${e.name} is already in contacts`); // якщо в списку контактів існує контакт з таким ім'ям, вийти та вивести відповідне повідомлення\n    } else if (\n      contacts.find(\n        item =>\n          item.number\n            .replaceAll('+', '')\n            .replaceAll(' ', '')\n            .replaceAll('(', '')\n            .replaceAll(')', '')\n            .replaceAll('-', '') ===\n          number\n            .replaceAll('+', '')\n            .replaceAll(' ', '')\n            .replaceAll('(', '')\n            .replaceAll(')', '')\n            .replaceAll('-', '')\n      ) // при порівнянні видаляємо плюс, пробіли, дужки та тире, якщо вони є, для унеможливлення реєстрації однакових номерів з додатковими символами\n    ) {\n      return Notiflix.Notify.warning(`Number ${name} is already in contacts`); // якщо в списку контактів існує контакт з таким номером телефону, вийти та вивести відповідне повідомлення\n    }\n\n    dispatch(addContact({ name, number })); // інакше, додати цей новий контакт до сховища stor\n\n    e.name = ''; // очищення поля name форми\n    e.number = ''; // очищення поля number форми\n  }; // функція addContact виконує запит на додавання нового контакту на сервер\n\n  return (\n    <Formik\n      initialValues={INITIAL_STATE}\n      validationSchema={schema}\n      onSubmit={addNewContact}\n    >\n      <FormContainer>\n        <Label htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <Error name=\"name\" component=\"p\" />\n        </Label>\n        <Label htmlFor=\"number\">\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <Error name=\"number\" component=\"p\" />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormContainer>\n    </Formik>\n  ); // при настанні події onSubmit викликається функція addNewContact\n}; // повернення для рендеру розмітки форми (теги Label і Input для кожного поля форми та тег Button)\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 10px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n    margin-bottom: 8px;\n\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n    margin-bottom: 6px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled.input`\n  width: 340px;\n  height: 24px;\n  padding-left: 12px;\n\n  font-size: 18px;\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n\n  &:hover {\n    background-color: var(--light-focus-color);    \n    color: #fff;\n  }\n\n  &:focus {   \n    background-color: var(--light-focus-color);\n    border-color: var(--light-focus-color);\n    color: #000;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 270px;\n    height: 20px;\n    padding-left: 10px;\n\n    font-size: 14px;\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 200px;\n    height: 16px;\n    padding-left: 8px;\n\n    font-size: 10px;\n    border-radius: 6px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice';\nimport { selectFiltered } from '../../redux/contacts/contactsSelectors';\nimport { Label, Input } from './Filter.styled'; // імпорт стилів тегів Label, Input\n\nexport const Filter = () => {\n  const filter = useSelector(selectFiltered); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux за допомогою функції селектора getFilter\n  const dispatch = useDispatch(); //виклик хука useDispatch повертає посилання на dispatch функцію зі сховища Redux, для відправки action за потреби\n\n  const formChange = e => {\n    dispatch(setFilter(e.target.value)); // запис в стан сховища Redux значення value поля вводу \"Find contacts by name\" за допомогою dispatch функції\n  }; // функція formChange, виклик функції призводить до запис в стан сховища Redux\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter} // значення поля вводу \"Find contacts by name\" взяте зі стану сховища Redux за допомогою функції селектора getFilter\n        onChange={formChange}\n      />\n    </Label> // при настанні події onChange викликається функція formChange\n  );\n}; // поверненя розмітки поля filter (теги Label і Input)\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  width: 350px;\n  height: 28px;\n  margin: 0;\n\n  font-size: 18px;\n  text-transform: capitalize;\n  background-color: transparent;\n\n  @media (max-width: 1023.98px) {\n    width: 270px;\n    height: 24px;\n\n    font-size: 14px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 176px;\n    height: 20px;\n\n    font-size: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  height: 28px;\n\n  font-size: 18px;\n  text-transform: capitalize;\n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n  \n  &:hover,\n  &:focus {\n    background-color: #ff6b0a;\n    border-color: #ff6b0a;\n    color: #fff;\n  }\n\n  @media (max-width: 1023.98px) {\n    height: 24px;\n\n    font-size: 14px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    height: 20px;\n\n    font-size: 10px;\n\n    border-radius: 5px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport PropTypes from 'prop-types'; // імпорт PropTypes для документування призначених типів властивостей, що передаються компонентам\nimport {\n  setEditContact,\n  setEditModal,\n} from '../../redux/contacts/contactsSlice';\nimport { Text, Button } from './ContactListItem.styled'; // імпорт стилів тегів ul(List), li(ListItem), p(Text), Button\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch(); //виклик хука useDispatch повертає посилання на dispatch функцію зі сховища Redux, для відправки action за потреби\n\n  const toggleModal = currentEditContact => {   \n    dispatch(setEditContact(currentEditContact));\n    dispatch(setEditModal());\n  };\n\n  const onDeleteContact = id => {    \n    dispatch(deleteContact(id));\n  }; // функція onDeleteContact робить запит на сервер на видалення контакту по id\n\n  return (\n    <>\n      <Text>\n        &#8226; {name}: {number}\n      </Text>\n      <Button type=\"button\" onClick={() => toggleModal({ id, name, number })}>\n        Edit\n      </Button>\n      <Button type=\"button\" onClick={() => onDeleteContact(id)}>\n        Delete\n      </Button>\n    </> // створення елементів для елементу списку li; при настанні події onClick викликається функція onDeleteContact\n  );\n}; // повернення розмітки елементу списку контактів компонента ContactListItem\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n}; // типізація (опис типів) пропсів компоненту ContactListItem\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-left: 0;\n  margin-top: 16px;\n  gap: 12px;\n\n  list-style: inside;\n\n  @media (max-width: 1023.98px) {\n    margin-top: 12px;\n    gap: 10px;\n  }\n\n  @media (max-width: 767.98px) {\n    margin-top: 8px;\n    gap: 4px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n\n  @media (max-width: 1023.98px) {\n    gap: 10px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 5px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContact } from '../../redux/contacts/contactsSelectors';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { List, ListItem } from './ContactList.styled'; // імпорт стилів тегів ul(List), li(ListItem), p(Text), Button\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContact); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux за допомогою функції селектора selectVisibleContact\n\n  return (\n    filteredContacts.length > 0 && (\n      <List>\n        {filteredContacts.map(item => (\n          <ListItem key={item.id}>\n            <ContactListItem\n              id={item.id}\n              name={item.name}\n              number={item.number}\n            />\n          </ListItem>\n        ))}\n      </List>\n    ) // створення списку елементів ul, якщо є хоча б один контакт, що відповідає критеріям пошуку\n  );\n}; // повернення розмітки списку контактів функції ContactList\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background-color: rgba(0, 0, 0, 0.8);  \n  z-index: 999;\n`;\n\nexport const ModalWindow = styled.div`\n  width: 420px;\n  height: 300px;\n  \n  background-color: inherit;\n  border: 1px solid currentColor;\n  border-radius: 10px;\n\n  @media (max-width: 1023.98px) {\n    width: 340px;\n    height: 250px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 300px;\n    height: 200px;\n\n    border-radius: 6px;\n  }\n`;\n\nexport const Container = styled.div`\n  position: relative;\n  margin: 0;\n  padding: 20px;  \n\n  @media (max-width: 1023.98px) {\n    padding: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 12px;\n  }\n`;\n\nexport const CloseBtn = styled.button`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 38px;\n  width: 38px;\n\n  background-color: transparent;\n  border-radius: 10px;\n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit; \n\n  &:hover,\n  &:focus {\n    background-color: #ff6b0a;\n    border-color: #ff6b0a;\n    color: #fff;\n  }\n\n  @media (max-width: 1023.98px) {\n    height: 34px;\n    width: 34px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    height: 30px;\n    width: 30px;\n\n    border-radius: 5px;\n  }\n`;\n\nexport const Title = styled.h1`\n  padding: 12px 0;\n\n  font-size: 24px;\n  text-align: center;\n\n  @media (max-width: 1023.98px) {\n    padding: 10px 0;\n\n    font-size: 20px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 8px 0;\n\n    font-size: 16px;\n  }\n`;\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;  \n  gap: 12px;  \n  padding: 8px;\n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n\n  @media (max-width: 1023.98px) {\n    gap: 10px;    \n    padding: 6px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 8px;    \n    padding: 4px;\n\n    border-radius: 6px;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 10px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n    margin-bottom: 8px;\n\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n    margin-bottom: 6px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  width: 340px;\n  height: 24px;\n  padding-left: 12px;\n\n  font-size: 18px;\n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n\n  &:hover {\n    background-color: var(--light-focus-color);   \n    color: #fff;\n  }\n\n  &:focus {    \n    background-color: var(--light-focus-color);\n    border-color: var(--light-focus-color);\n    color: #000;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 270px;\n    height: 20px;\n    padding-left: 10px;\n\n    font-size: 14px;\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 250px;\n    height: 16px;\n    padding-left: 8px;\n\n    font-size: 10px;\n    border-radius: 6px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  height: 28px;\n\n  font-size: 18px;\n  text-transform: capitalize;  \n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n  \n  &:hover,\n  &:focus {\n    background-color: #ff6b0a;\n    border-color: #ff6b0a;\n    color: #fff;\n  }\n\n  @media (max-width: 1023.98px) {\n    height: 24px;\n\n    font-size: 14px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    height: 20px;\n\n    font-size: 10px;\n\n    border-radius: 5px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\n// import { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n// import Notiflix from 'notiflix';\nimport { BsX } from 'react-icons/bs';\nimport { editCurrentContact } from '../../redux/contacts/contactsOperations';\nimport {\n  setEditModal  \n} from '../../redux/contacts/contactsSlice';\nimport { selectEditContact } from '../../redux/contacts/contactsSelectors';\nimport {\n  Backdrop,\n  ModalWindow,\n  Container,\n  Title,\n  FormContainer,\n  Label,\n  Error,\n  Input,\n  CloseBtn,\n  Button,\n} from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/; // регулярний вираз для імені\nconst numberRegex = /^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$/; // регулярний вираз для номера телефону\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(nameRegex, 'Name is not valid!')\n    .trim()\n    .required('Required!'),\n  number: Yup.string()\n    .min(7, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(numberRegex, 'Phone number is not valid!')\n    .trim()\n    .required('Required!'),\n}); // валідація полів форми\n\nexport const Modal = () => {\n  const editCurrContact = useSelector(selectEditContact);\n  const dispatch = useDispatch();\n  // const contacts = useSelector(selectContacts); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux за допомогою функції селектора selectContacts\n\n  useEffect(() => {\n    function handleEscape(e) {\n      if (e.code === 'Escape') {\n        dispatch(setEditModal());\n      }\n    }\n    window.addEventListener('keydown', handleEscape);\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  }, [dispatch]);\n\n  const initialState = {\n    name: editCurrContact.name,\n    number: editCurrContact.number,\n  }; // ініціалізація полів форми\n\n  const handleSubmit = (values, { resetForm }) => {\n    const name = values.name;\n    const number = values.number;\n    const user = { id: editCurrContact.id, name, number };  \n\n    // if (\n    //   contacts.find(\n    //     item =>\n    //       item.number\n    //         .replaceAll('+', '')\n    //         .replaceAll(' ', '')\n    //         .replaceAll('(', '')\n    //         .replaceAll(')', '')\n    //         .replaceAll('-', '') ===\n    //       number\n    //         .replaceAll('+', '')\n    //         .replaceAll(' ', '')\n    //         .replaceAll('(', '')\n    //         .replaceAll(')', '')\n    //         .replaceAll('-', '')\n    //   ) // при порівнянні видаляємо плюс, пробіли, дужки та тире, якщо вони є, для унеможливлення реєстрації однакових номерів з додатковими символами\n    // ) {\n    //   return Notiflix.Notify.warning(\n    //     `Number ${number} ${name} is already in contacts`\n    //   ); // якщо в списку контактів існує контакт з таким номером телефону, вийти та вивести відповідне повідомлення\n    // }\n\n    dispatch(editCurrentContact(user)); // інакше, виконує запит на редагування контакту  \n    dispatch(setEditModal());\n    resetForm(); // очищення полів форми\n  }; // функція handleSubmit виконує запит на редагування контакту на сервер\n\n  const handleBackdrop = e => {\n    if (e.target === e.currentTarget) {\n      dispatch(setEditModal());\n    }\n  };\n\n  const handleClose = () => {\n    dispatch(setEditModal());\n  };\n\n  const handleEscape = e => {\n    if (e.code === 'Escape') {\n      dispatch(setEditModal());\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdrop}>\n      <ModalWindow onKeyDown={handleEscape}>\n        <Container>\n          <Title>Edit contacts</Title>\n          <Formik\n            initialValues={initialState}\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n          >\n            <FormContainer>\n              <Label htmlFor=\"name\">\n                Name\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                />\n                <Error name=\"name\" component=\"p\" />\n              </Label>\n              <Label htmlFor=\"number\">\n                Number\n                <Input\n                  type=\"tel\"\n                  name=\"number\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                />\n                <Error name=\"number\" component=\"p\" />\n              </Label>\n              <Button type=\"submit\">Edit contact</Button>\n            </FormContainer>\n          </Formik>\n          <CloseBtn onClick={handleClose}>\n            <BsX size={25} />\n          </CloseBtn>\n        </Container>\n      </ModalWindow>\n    </Backdrop>,\n    modalRoot\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 60vw;\n  margin: 20px auto 0;\n  padding: 15px;\n\n  background-color: rgb(231, 236, 242);\n  border-radius: 10px;\n\n  @media (max-width: 1023.98px) {\n    max-width: 70vw;\n    margin: 15px auto 0;\n    padding: 10px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    max-width: 80vw;\n    margin: 10px auto 0;\n    padding: 5px;\n\n    border-radius: 6px;\n  }\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: calc(10px + 2vmin);\n\n  max-width: 56vw;\n  margin: 20px auto;\n  padding: 15px;\n  \n  background-color: inherit;  \n\n  @media (max-width: 1023.98px) {\n    max-width: 64vw;\n    margin: 15px auto;\n    padding: 10px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    max-width: 72vw;\n    margin: 10px auto;\n    padding: 5px;\n\n    border-radius: 6px;\n  }\n`;\n\nexport const TopTitle = styled.h1`\n  padding: 12px 0;\n\n  font-size: 24px;\n  text-align: center;\n\n  @media (max-width: 1023.98px) {\n    padding: 10px 0;\n\n    font-size: 20px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 8px 0;\n\n    font-size: 16px;\n  }\n`;\n\nexport const Title = styled.h2`\n  padding: 12px 0;\n\n  font-size: 24px;\n  text-align: center;\n\n  @media (max-width: 1023.98px) {\n    padding: 10px 0;\n\n    font-size: 20px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 8px 0;\n\n    font-size: 16px;\n  }\n  `;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { getContacts } from '../../redux/contacts/contactsOperations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectEditModal,\n} from '../../redux/contacts/contactsSelectors';\nimport { Loader } from '../../components/Loader/Loader';\nimport { Modal } from '../../components/Modal/Modal';\nimport Notiflix from 'notiflix';\nimport { Box, TopTitle, Title } from './Contacts.styled'; // імпорт стилів тегів div (Container), div (Box), h1 (TopTitle), h2 (Title)\n\nconst Contacts = () => {\n  const dispatch = useDispatch(); //виклик хука useDispatch повертає посилання на dispatch функцію зі сховища Redux, для відправки action за потреби\n  const isLoading = useSelector(selectIsLoading); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux (стан isLoading) за допомогою функції селектора\n  const error = useSelector(selectError); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux (стан error) за допомогою функції селектора\n  const editModal = useSelector(selectEditModal);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]); // якщо викликана функція dispatch (ініційована зміна стану) то виконуємо запит на сервер (getContacts())\n\n  return (   \n    <Box>\n      <TopTitle>Phonebook</TopTitle>\n      <ContactForm />\n      <Title>Contacts</Title>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      {!isLoading && <ContactList />}\n      {error && Notiflix.Notify.failure(`${error}`)}\n      {editModal && <Modal />}\n    </Box>\n    // </Container>\n  );\n}; // повернення розмітки списку контактів функції ContactList\n\nexport default Contacts;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items; // експорт функції селектору selectContacts, що повертає список контактів зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectIsLoading = state => state.contacts.isLoading; // експорт функції селектору selectIsLoading, що повертає поточний стан завантаження контактів зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectError = state => state.contacts.error; // експорт функції селектору selectError, що повертає повідомлення значення об'єкта помилки завантаження контактів зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectFiltered = state => state.filter; // експорт функції селектору selectFilter, що повертає значення пошуку (списку, що відповідає критеріям пошуку) зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectVisibleContact = createSelector(\n  [selectContacts, selectFiltered],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport const selectEditContact = state => state.contacts.editContact;\n\nexport const selectEditModal = state => state.contacts.showModal;\n"],"names":["FormContainer","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","Field","_templateObject3","Error","ErrorMessage","_templateObject4","Button","_templateObject5","schema","Yup","shape","name","min","max","matches","trim","required","number","INITIAL_STATE","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","e","find","item","toLowerCase","replaceAll","Notiflix","concat","addContact","children","_jsxs","htmlFor","type","title","component","Filter","filter","selectFiltered","value","onChange","setFilter","target","Text","ContactListItem","_ref","id","_Fragment","onClick","currentEditContact","setEditContact","setEditModal","deleteContact","onDeleteContact","List","ListItem","ContactList","filteredContacts","selectVisibleContact","length","map","Backdrop","ModalWindow","Container","CloseBtn","Title","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","modalRoot","document","querySelector","Modal","editCurrContact","selectEditContact","useEffect","handleEscape","code","window","addEventListener","removeEventListener","initialState","createPortal","currentTarget","onKeyDown","values","resetForm","user","editCurrentContact","BsX","size","Box","TopTitle","isLoading","selectIsLoading","error","selectError","editModal","selectEditModal","getContacts","Loader","state","items","createSelector","normalizedFilter","contact","includes","editContact","showModal"],"sourceRoot":""}