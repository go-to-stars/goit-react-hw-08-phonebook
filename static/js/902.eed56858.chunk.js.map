{"version":3,"file":"static/js/902.eed56858.chunk.js","mappings":"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","sources":["pages/Register/Register.styled.jsx","pages/Register/Register.jsx","redux/contacts/contactsSelectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const TitleReg = styled.h1`\n  padding: 12px 0;\n\n  font-size: 24px;\n  text-align: center;\n\n  @media (max-width: 1023.98px) {\n    padding: 10px 0;\n\n    font-size: 20px;\n  }\n\n  @media (max-width: 767.98px) {\n    padding: 8px 0;\n\n    font-size: 16px;\n  }\n`;\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto;\n  gap: 12px;\n  width: 420px;\n  padding: 8px;\n\n  border: 2px solid currentColor;\n  border-radius: 10px;\n\n  @media (max-width: 1023.98px) {\n    gap: 10px;\n    width: 320px;\n    padding: 6px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 8px;\n    width: 220px;\n    padding: 4px;\n\n    border-radius: 6px;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 10px;\n\n  font-size: 20px;\n\n  @media (max-width: 1023.98px) {\n    gap: 6px;\n    margin-bottom: 8px;\n\n    font-size: 16px;\n  }\n\n  @media (max-width: 767.98px) {\n    gap: 4px;\n    margin-bottom: 6px;\n\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  width: 340px;\n  height: 24px;\n  padding-left: 12px;\n\n  font-size: 18px;\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n\n  &:hover {\n    background-color: var(--light-focus-color);    \n    color: #fff;\n  }\n\n  &:focus {   \n    background-color: var(--light-focus-color);\n    border-color: var(--light-focus-color);\n    color: #000;\n  }\n\n  @media (max-width: 1023.98px) {\n    width: 270px;\n    height: 20px;\n    padding-left: 10px;\n\n    font-size: 14px;\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    width: 200px;\n    height: 16px;\n    padding-left: 8px;\n\n    font-size: 10px;\n    border-radius: 6px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  height: 28px;\n\n  font-size: 18px;\n  text-transform: capitalize;  \n\n  border: 1px solid currentColor;\n  border-radius: 10px;\n  color: inherit;\n  background-color: inherit;\n  \n  &:hover,\n  &:focus {\n    background-color: #ff6b0a;\n    border-color: #ff6b0a;\n    color: #fff;\n  }\n\n  @media (max-width: 1023.98px) {\n    height: 24px;\n\n    font-size: 14px;\n\n    border-radius: 8px;\n  }\n\n  @media (max-width: 767.98px) {\n    height: 20px;\n\n    font-size: 10px;\n\n    border-radius: 5px;\n  }\n`;\n\nexport const ErrorText = styled.div`\n  margin: 0;\n\n  font-size: 14px;\n  color: red;\n\n  @media (max-width: 1023.98px) {\n    font-size: 12px;\n  }\n\n  @media (max-width: 767.98px) {\n    font-size: 10px;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from '../../redux/auth/authOperations';\nimport {\n  selectError,\n  selectIsLoading,\n} from '../../redux/contacts/contactsSelectors';\nimport { Loader } from '../../components/Loader/Loader';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  TitleReg,\n  FormContainer,\n  Label,\n  Input,\n  Button,\n  Error,\n  ErrorText,\n} from './Register.styled'; // імпорт стилів тегів form (FormContainer), label (Label), input (Input), button (Button)\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/; // регулярний вираз для імені користувача\nconst emailRegex = /^[-\\w.]+@([A-z0-9][-A-z0-9]+\\.)+[A-z]{2,4}$/; // регулярний вираз для електронної пошти\nconst passwordRegex =\n  /(?=^.{5,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])|(?=.*[a-z]).*$/; // регулярний вираз для паролю\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(nameRegex, 'Name is not valid!')\n    .trim()\n    .required('Required!'),\n  email: Yup.string()\n    .min(5, 'Too Short!')\n    .max(35, 'Too Long!')\n    .email()\n    .matches(emailRegex, 'Email is not valid!')\n    .trim()\n    .required('Required!'),\n  password: Yup.string()\n    .min(5, 'Too Short!')\n    .max(25, 'Too Long!')\n    .matches(passwordRegex, 'Password is not valid!')\n    .trim()\n    .required('Required!'),\n}); // валідація полів форми\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  password: '',\n}; // ініціалізація полів форми\n\nconst Register = () => {\n  const dispatch = useDispatch(); //виклик хука useDispatch повертає посилання на dispatch функцію зі сховища Redux, для відправки action за потреби\n  const error = useSelector(selectError); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux за допомогою функції селектора selectError\n  const loading = useSelector(selectIsLoading); // виклик хука useSelector дозволяє витягувати дані зі стану сховища Redux за допомогою функції селектора selectIsLoading\n\n  const handleSubmit = e => {\n    const { name, email, password } = e; // деструктуризація полів форми, що викликала подію onSubmit\n\n    dispatch(register({ name, email, password })); // запуск методу dispatch сховища redux, що викликає функцію register з аргументами { name, email, password }, що потрапляють у запит у вигляді змінної credentials\n\n    e.name = ''; // очищення поля name форми\n    e.email = ''; // очищення поля email форми\n    e.password = ''; // очищення поля password форми\n  };\n\n  return (\n    <>\n      <TitleReg>Registration</TitleReg>\n      <Formik\n        initialValues={INITIAL_STATE}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormContainer>\n          <Label htmlFor=\"name\">\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              placeholder=\"Please enter your Name.\"\n            />\n            <Error name=\"name\" component=\"p\" />\n          </Label>\n          <Label htmlFor=\"email\">\n            Email\n            <Input\n              type=\"text\"\n              name=\"email\"\n              title=\"Email must be digits and can contain spaces, dashes, parentheses and can \"\n              placeholder=\"Please enter your Email.\"\n            />\n            <Error name=\"email\" component=\"p\" />\n          </Label>\n          <Label htmlFor=\"password\">\n            Password\n            <Input\n              type=\"password\"\n              name=\"password\"\n              title=\"The password must be at least 1 lowercase or uppercase Latin letter, numbers, special characters. Total minimum 5 and maximum 25 characters\"\n              placeholder=\"Please enter your Password.\"\n            />\n            <Error name=\"password\" component=\"p\" />\n          </Label>\n          <Button type=\"submit\">Register</Button>\n        </FormContainer>\n      </Formik>\n      {loading && <Loader />}\n      {error && (\n        <ErrorText>\n          Ooops, something went wrong... Try a bit later or reload page\n        </ErrorText>\n      )}\n    </>\n  ); // при настанні події onSubmit викликається функція handleSubmit\n}; // повернення для рендеру розмітки форми (теги Label, Input та Error для кожного поля форми,тег Button, спінер Loader та поле помилки ErrorText)\n\nexport default Register;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items; // експорт функції селектору selectContacts, що повертає список контактів зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectIsLoading = state => state.contacts.isLoading; // експорт функції селектору selectIsLoading, що повертає поточний стан завантаження контактів зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectError = state => state.contacts.error; // експорт функції селектору selectError, що повертає повідомлення значення об'єкта помилки завантаження контактів зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectFiltered = state => state.filter; // експорт функції селектору selectFilter, що повертає значення пошуку (списку, що відповідає критеріям пошуку) зі стану сховища Redux (за допомогою виклика хука useSelector)\n\nexport const selectVisibleContact = createSelector(\n  [selectContacts, selectFiltered],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport const selectEditContact = state => state.contacts.editContact;\n\nexport const selectEditModal = state => state.contacts.showModal;\n"],"names":["TitleReg","styled","_templateObject","_taggedTemplateLiteral","FormContainer","Form","_templateObject2","Label","_templateObject3","Input","Field","_templateObject4","Error","ErrorMessage","_templateObject5","Button","_templateObject6","ErrorText","_templateObject7","schema","Yup","shape","name","min","max","matches","trim","required","email","password","INITIAL_STATE","dispatch","useDispatch","error","useSelector","selectError","loading","selectIsLoading","_jsxs","_Fragment","children","_jsx","Formik","initialValues","validationSchema","onSubmit","e","register","htmlFor","type","title","placeholder","component","Loader","selectContacts","state","contacts","items","isLoading","selectFiltered","filter","selectVisibleContact","createSelector","normalizedFilter","toLowerCase","contact","includes","selectEditContact","editContact","selectEditModal","showModal"],"sourceRoot":""}